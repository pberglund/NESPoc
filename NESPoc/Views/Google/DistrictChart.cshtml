<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
<script src="~/Scripts/GoogleHelpers.js"></script>
<script type="text/javascript">

    var comboObj = null;
    var lineObj = null;
    var lineDataVals = [];


    // Load the Visualization API and the corechart package.
    google.charts.load('current', { 'packages': ['corechart'] });

    // Set a callback to run when the Google Visualization API is loaded.
    google.charts.setOnLoadCallback(drawChart);


    function drawChart() {


        var chartOptions = [
            {
                method: "MidwestData",
                type: 0,
                mainManipulation: function (obj) {

                    var d = obj.data;

                    var districtObj = d.District;
                    var branchObj = d.Branch;

                    var districtData = [];
                    var branchData = [];

                    //var totalMinDistrict = 0;
                    var totalMaxDistrict = 0;
                    //var totalMinBranch = 0;
                    var totalMaxBranch = 0;

                    districtData.push(["Index", "Percent", "Revenue"]);
                    for (var j = 0; j < districtObj.Records.length; j++) {

                        var percent = districtObj.Records[j].PercentRevenue / 10;
                        var revenue = districtObj.Records[j].Revenue;

                        //totalMinDistrict = Math.min(totalMinDistrict, revenue);
                        totalMaxDistrict = Math.max(totalMaxDistrict, revenue);

                        districtData.push([j, percent, revenue]);
                    }

                    branchData.push(["Timestamp", "Revenue"]);
                    for (var j = 0; j < branchObj.BranchRevenues.length; j++) {
                        var date = new Date(branchObj.BranchRevenues[j].Date);
                        var branchRevenue = branchObj.BranchRevenues[j].Revenue;

                        //totalMinBranch = Math.min(totalMinBranch, branchRevenue);
                        totalMaxBranch = Math.max(totalMaxBranch, branchRevenue);
                        branchData.push([date, branchRevenue]);
                    }

                    var comboData = google.visualization.arrayToDataTable(districtData);
                    var lineData = google.visualization.arrayToDataTable(branchData);
                    return {
                        dataTables: [comboData, lineData],
                        totalMaxDistrict: totalMaxDistrict,
                        
                    }
                },
                postProcessing: function (obj) {

                    var comboData = obj.dataTables[0];
                    var lineData = obj.dataTables[1];
                    var totalMaxDistrict = obj.totalMaxDistrict;

                    comboObj = {
                        chartType: "ComboChart",
                        elementId: "combo_chart_div",
                        data: comboData,
                        options: {
                            width: '100%',
                            height: '100%',
                            trendlines: {
                                0: {
                                    color: 'red',
                                    tooltip: false,
                                },
                                1: {
                                    color: 'black',
                                    tooltip: false,
                                },
                            },
                            title: 'District Chart',
                            vAxes: {
                                0: {
                                    title: 'Revenue',
                                    gridlines: { color: 'transparent' },
                                    format: "$#,#",
                                    ticks: [],
                                },
                                1: {
                                    title: 'Percent',
                                    gridlines: { color: 'transparent' },
                                    format: "percent",
                                    viewWindow: {
                                        max: .05,
                                        min: 0
                                    }

                                },
                            },
                            series: {
                                0: { targetAxisIndex: 1, type: "bars", },
                                1: { targetAxisIndex: 0 },
                            },
                            colors: ["red", "blue"],
                            hAxis: {
                                showTextEvery: 1,
                                gridlines: { count: 24 }
                            },
                        },
                    }

                    var magnitude = GetMagnitude(totalMaxDistrict).Magnitude;

                    var bench = Math.pow(10, magnitude);

                    var step = Math.ceil(totalMaxDistrict / bench) * bench;

                    while (step > 0) {
                        var val = step;
                        var suffix;
                        var result = GetMagnitude(val);
                        switch (result.Magnitude) {
                            case 5:
                                suffix = 'K';
                                break;
                            case 6:
                                suffix = 'M';
                                break;
                            default:
                                suffix = '';
                        }

                        var shift = 10;
                        var mod = 10;

                        if (step < 1000000) {
                            shift = 100;
                            mod = 1;
                        }

                        var formattedVal = "$" + (Math.round(result.Remainder * shift) / mod) + suffix;
                        comboObj.options.vAxes["0"].ticks.push({ v: step, f: formattedVal });
                        if (step > 500000) {
                            step -= Math.pow(10, result.Magnitude) / 2;
                        } else {
                            step = 0;
                        }
                    }
                    
                    formatCurrency(lineData, 1);
                    formatCurrency(comboData, 2);
                    formatPercentage(comboData, 1);
                    formatDate(lineData, 0);

                    lineObj = {
                        chartType: "LineChart",
                        elementId: "line_chart_div",
                        data: lineData,
                        options: {
                            legend: { position: 'top' },
                            width: '100%',
                            height: '100%',
                            trendlines: {
                                0: {
                                    color: 'black',
                                    tooltip: false,
                                },
                            },
                            hAxis: {
                                format: 'MMM yy',
                                gridlines: { count: 24 }
                            },
                            vAxis: {
                                format: 'currency',
                            }
                        },
                    }

                    return [comboObj, lineObj];
                }
            }
        ];
        ConfigureCharts(chartOptions);
    }

    
</script>


<div class="row">
    <div class="col-md-12">
        <h3>District Combo Chart</h3>
        <div class="chart_wrap">
            <div id="combo_chart_div" class="chart"></div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <h3>District Line Chart</h3>
        <div class="chart_wrap">
            <div id="line_chart_div" class="chart"></div>
        </div>
    </div>
</div>
