@{
    ViewBag.Title = "Purchase History";
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/Charts/Chart.min.js"></script>
<script src="~/Scripts/Charts/Chart.Core.js"></script>
<script src="~/Scripts/Charts/Chart.Radar.js"></script>
<script src="~/Scripts/Charts/Chart.Bar.js"></script>
<script src="~/Scripts/Charts/Chart.Doughnut.js"></script>
<script src="~/Scripts/Charts/Chart.Line.js"></script>
<script src="~/Scripts/Charts/Chart.PolarArea.js"></script>

<style>
    .legend {
        list-style: none;
        /*position: absolute;*/
        right: 8px;
        top: 0;
    }

        .legend li {
            display: block;
            padding-left: 30px;
            position: relative;
            margin-bottom: 4px;
            border-radius: 5px;
            padding: 2px 8px 2px 28px;
            font-size: 14px;
            cursor: default;
            -webkit-transition: background-color 200ms ease-in-out;
            -moz-transition: background-color 200ms ease-in-out;
            -o-transition: background-color 200ms ease-in-out;
            transition: background-color 200ms ease-in-out;
        }

            .legend li:hover {
                background-color: #fafafa;
            }

            .legend li span {
                display: block;
                position: absolute;
                left: 0;
                top: 0;
                width: 20px;
                height: 100%;
                border-radius: 5px;
            }
</style>

<script>
    var lineOptions = {

        ///Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: true,

        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",

        //Number - Width of the grid lines
        scaleGridLineWidth: 1,

        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,

        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,

        //Boolean - Whether the line is curved between points
        bezierCurve: true,

        //Number - Tension of the bezier curve between points
        bezierCurveTension: 0.4,

        //Boolean - Whether to show a dot for each point
        pointDot: true,

        //Number - Radius of each point dot in pixels
        pointDotRadius: 4,

        //Number - Pixel width of point dot stroke
        pointDotStrokeWidth: 1,

        //Number - amount extra to add to the radius to cater for hit detection outside the drawn point
        pointHitDetectionRadius: 20,

        //Boolean - Whether to show a stroke for datasets
        datasetStroke: true,

        //Number - Pixel width of dataset stroke
        datasetStrokeWidth: 2,

        //Boolean - Whether to fill the dataset with a colour
        datasetFill: true,

        //String - A legend template
        legendTemplate: "<ul class=\"legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

    };

    var barOptions = {
        //Boolean - Whether the scale should start at zero, or an order of magnitude down from the lowest value
        scaleBeginAtZero: true,

        //Boolean - Whether grid lines are shown across the chart
        scaleShowGridLines: true,

        //String - Colour of the grid lines
        scaleGridLineColor: "rgba(0,0,0,.05)",

        //Number - Width of the grid lines
        scaleGridLineWidth: 1,

        //Boolean - Whether to show horizontal lines (except X axis)
        scaleShowHorizontalLines: true,

        //Boolean - Whether to show vertical lines (except Y axis)
        scaleShowVerticalLines: true,

        //Boolean - If there is a stroke on each bar
        barShowStroke: true,

        //Number - Pixel width of the bar stroke
        barStrokeWidth: 2,

        //Number - Spacing between each of the X value sets
        barValueSpacing: 5,

        //Number - Spacing between data sets within X values
        barDatasetSpacing: 1,

        //String - A legend template
        legendTemplate: "<ul class=\"legend\"><% for (var i=0; i<datasets.length; i++){%><li><span style=\"background-color:<%=datasets[i].strokeColor%>\"></span><%if(datasets[i].label){%><%=datasets[i].label%><%}%></li><%}%></ul>"

    }

    var charts = {
        lineChart: null,
        lineChartYear: null,
        barChart: null,
        barChartYear: null,

    };

    var randomColorFactor = function () { return Math.round(Math.random() * 255); };
    var randomColorString = function (x) {
        var initialString = 'rgba(' + randomColorFactor() + ',' + randomColorFactor() + ',' + randomColorFactor();
        if (x == null || x == '') {
            return initialString + ')';
        }

        return initialString + ',' + x + ')';
    }

    var defaultLineDataOptions = function () {
        return {
            fillColor: randomColorString(0.5),
            strokeColor: randomColorString(0.8),
            highlightFill: randomColorString(0.75),
            highlightStroke: randomColorString(1),
        }
    };

    var defaultBarDataOptions = function () {
        return {
            fillColor: randomColorString(0.2),
            strokeColor: randomColorString(1),
            pointColor: randomColorString(1),
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: randomColorString(1),
        }
    };

    $(function () {



        var lineYearData = {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            datasets: [
                {
                    label: "Customer 42",
                    data: []
                },
            ]
        };


        var barYearData = {
            labels: ["2010", "2011", "2012", "2013", "2014", "2015", "2016"],
            datasets: [
                {
                    label: "Customer 42",
                    data: []
                }
            ]
        };
        lineYearData.datasets[0] = merge_options(lineYearData.datasets[0], defaultLineDataOptions());
        barYearData.datasets[0] = merge_options(barYearData.datasets[0], defaultBarDataOptions());

        randomizeData(lineYearData, ['Customer 42']);
        barYearData.datasets[0].data = lineYearData.datasets[0].data;


        var lineTrendLineObj = getTrendLine(lineYearData.datasets[0].data, [0, 1, 2, 3, 4, 5, 6]);
        var barTrendLineObj = getTrendLine(barYearData.datasets[0].data, [0, 1, 2, 3, 4, 5, 6]);

        lineYearData.datasets.push({ label: "Trend Line", data: lineTrendLineObj });
        barYearData.datasets.push({ label: "Trend Line", data: barTrendLineObj });


        lineYearData.datasets[1] = merge_options(lineYearData.datasets[1], {
            fillColor: "rgba(0, 0, 0, 0)",
            strokeColor: "rgba(0, 0, 0, 1)",
            pointColor: "rgba(0, 0, 0, 1)",
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: "rgba(0, 0, 0, 1)",
        });
        barYearData.datasets[1] = merge_options(barYearData.datasets[1], {
            fillColor: "rgba(0, 0, 0, 0)",
            strokeColor: randomColorString(0.8),
            pointColor: randomColorString(0.8),
            pointStrokeColor: "#fff",
            pointHighlightFill: "#fff",
            pointHighlightStroke: randomColorString(0.8),
        });


        configureChart('lineChart', 'lineChart', 'Line', lineYearData, lineOptions, 'updateLineChart', function (chart, labels) { randomizePointOnChart(chart, 100, 'points', null, labels); }, 'line-chart-holder');
        configureChart('barChart', 'barChart', 'Bar', barYearData, barOptions, 'updateBarChart', function (chart, labels) { randomizePointOnChart(chart, 100, 'bars', null, labels); }, 'bar-chart-holder');

    });

    function configureChart(chartVar, contextId, chartFunc, data, options, updateId, randomized, containerClass) {
        var ctx = $("#" + contextId).get(0).getContext("2d");

        charts[chartVar] = new Chart(ctx)[chartFunc](data, options);

        //$('.' + containerClass).append(charts[chartVar].generateLegend());


        //$('#' + updateId).click(function (e) {
        //    e.preventDefault();
        //    randomized(charts[chartVar]);
        //});

        var select = $('#' + updateId);

        select.change(function (e) {
            var selected = select.val();
            randomized(charts[chartVar], selected);
        });
    }

    function randomizeData(data, labels, max) {
        if (data == null || data.datasets == null) {
            return;
        }
        if (max == null || max < 0) {
            max = 100;
        }
        for (var j = 0; j < data.datasets.length; j++) {
            for (var i = 0; i < data.labels.length; i++) {
                data.datasets[j].data.push(Math.floor((Math.random() * max) + 1));
            }
        }

    }

    function randomizePointOnChart(chart, max, property, group, label) {
        if (chart == null) {
            return;
        }

        if (group == null || group == '') {
            group = 'datasets';
        }

        if (max == null || max < 0) {
            max = 100;
        }

        var value = Math.floor((Math.random() * max) + 1);

        var dataSet = Math.floor((Math.random() * chart[group].length));

        if (group != 'datasets') {
            chart[group][dataSet].value = value;
        } else {
            var dataIndex = Math.floor((Math.random() * chart[group][dataSet][property].length));
            chart.datasets[dataSet][property][dataIndex].value = value;
        }

        chart.label = label;

        chart.update();
    }

    function merge_options(obj1, obj2) {
        var obj3 = {};
        for (var obj1AttrName in obj1) { obj3[obj1AttrName] = obj1[obj1AttrName]; }
        for (var obj2AttrName in obj2) { obj3[obj2AttrName] = obj2[obj2AttrName]; }
        return obj3;
    }

    function linearRegression(y, x) {
        var lr = {};
        var n = y.length;
        var sum_x = 0;
        var sum_y = 0;
        var sum_xy = 0;
        var sum_xx = 0;
        var sum_yy = 0;

        for (var i = 0; i < y.length; i++) {

            sum_x += x[i];
            sum_y += y[i];
            sum_xy += (x[i] * y[i]);
            sum_xx += (x[i] * x[i]);
            sum_yy += (y[i] * y[i]);
        }

        lr['slope'] = (n * sum_xy - sum_x * sum_y) / (n * sum_xx - sum_x * sum_x);
        lr['intercept'] = (sum_y - lr.slope * sum_x) / n;
        lr['r2'] = Math.pow((n * sum_xy - sum_x * sum_y) / Math.sqrt((n * sum_xx - sum_x * sum_x) * (n * sum_yy - sum_y * sum_y)), 2);

        return lr;
    }

    function getTrendLine(y, x) {
        var linearData = linearRegression(y, x);

        var points = [];

        for (var i = 0; i < x.length; i++) {
            points.push(linearData.slope * x[i] + linearData.intercept);
        }

        return points;
    }
</script>
<div class="row">
    <div class="col-md-12">
        <h1>Chart JS - Purchase History</h1>
    </div>
</div>
<div class="row">
    <div class="col-md-6">
        <h2>Line chart - yearly purchases by year</h2>
        <div class="line-chart-holder">
            <div class="">
                <canvas id="lineChart" width="500" height="500"></canvas>
            </div>

        </div>
        @*<a class="btn" id="updateLineChart">Update</a>*@
        <select id="updateLineChart">
            <option value="Customer 43">Customer 43</option>
            <option value="Customer 44">Customer 44</option>
            <option value="Customer 45">Customer 45</option>
            <option value="Customer 46">Customer 46</option>
            <option value="Customer 47">Customer 47</option>
        </select>
    </div>
    <div class="col-md-6">
        <h2>Bar chart for yearly purchases by year</h2>
        <div class="bar-chart-holder">
            <div class="">
                <canvas id="barChart" width="500" height="500"></canvas>
            </div>

        </div>
        @*<a class="btn" id="updateBarChart">Update</a>*@

        <select id="updateBarChart">
            <option value="Customer 43">Customer 43</option>
            <option value="Customer 44">Customer 44</option>
            <option value="Customer 45">Customer 45</option>
            <option value="Customer 46">Customer 46</option>
            <option value="Customer 47">Customer 47</option>
        </select>
    </div>
</div>
